function varargout = roiReg(varargin)

% Summary: 
% 
% This code registers the FOVs of successive acquisitions to the
% first acquisition, displaying the FOVs and all active cells for each FOV,
% in a GUI.
% 
% Instructions:
% 
% Run this code by simply typing roiReg into the console. You must also
% have a folder that contains the data files (ie. SW065_180131_Acq1.mat) to
% be analyzed, alongside the tiff file composite projection images
% corresponding to each of those files and with the same name, minus the 
% extension (ie. SW065_180131_Acq1.tif). The result will be a GUI that
% will allow you to scroll through each of the registered images with the
% superimposed boundaries of active cells, color-coded with red = dSPN,
% green = iSPN, and blue = other.
% 
% *****Below is generated by Matlab***** 
% ROIREG MATLAB code for roiReg.fi
%      ROIREG, by itself, creates a new ROIREG or raises the existing
%      singleton*.
%
%      H = ROIREG returns the handle to a new ROIREG or the handle to
%      the existing singleton*.
%
%      ROIREG('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in ROIREG.M with the given input arguments.
%
%      ROIREG('Property','Value',...) creates a new ROIREG or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before roiReg_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to roiReg_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES
% Last Modified by GUIDE v2.5 03-Jul-2017 14:51:53


% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @roiReg_OpeningFcn, ...
                   'gui_OutputFcn',  @roiReg_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before roiReg is made visible.
function roiReg_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to roiReg (see VARARGIN)

% Choose default command line output for roiReg
handles.output = hObject;

[movNames, movPath] = uigetfile('*.tif','MultiSelect','on');
handles.movNames = sort(movNames);

set(handles.slider2,'Value',1)
set(handles.slider2,'SliderStep',[1,1]/(length(handles.movNames)-1))
set(handles.slider2,'Min',1)
set(handles.slider2,'Max',length(handles.movNames))

%% This is all the registration code!
cd(movPath)
handles.movies = {};
handles.tform = {};

% Loading movies into the handles
for movie = 1:length(handles.movNames)
    tempMov = tiffRead(handles.movNames{movie});
    handles.movies{movie} = tempMov(:,:,2);
end

% Setting parameters for image registration
[optimizer, metric] = imregconfig('multimodal');
transformType = 'rigid';

% Finding transformation to register each frame to the first
handles.tform{1} = [];
handles.movieRegStack = handles.movies{1};
for regNum = 2:length(handles.movNames)
    display(['Movie: ',num2str(regNum)]);
    handles.tform{regNum} = imregtform(handles.movies{regNum},handles.movies{1},'rigid',optimizer,metric);
    handles.movieRegStack = cat(3,handles.movieRegStack,imwarp(handles.movies{regNum},handles.tform{regNum},'OutputView',imref2d(size(handles.movies{1}))));
end
disp('Registration Complete!')

% Saving boundaries of all active cells registered to the first tiff
handles.maskRegistered = {{},{},{}};
handles.centroids = {{},{},{}};
for cellType = 1:3
    [handles.maskRegistered{cellType}, handles.centroids{cellType}] = registeringROI(handles.movNames, cellType, handles.tform, handles.movies);
end

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes roiReg wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = roiReg_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on slider movement.
function slider2_Callback(hObject, eventdata, handles)
% hObject    handle to slider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
cellColor = 'rgb';
movieNum = get(handles.slider2,'Value');

% Plotting the tiff image
imshow(handles.movieRegStack(:,:,movieNum),[min(min(handles.movies{movieNum})),max(max(handles.movies{movieNum}))]);
title(handles.movNames{movieNum})
hold on

% Plotting the boundaries of all active cells, registered to the first tiff
% image in the series
for cellType = 1:3
    [B,~] = bwboundaries(handles.maskRegistered{cellType}{movieNum},'noholes');
    if length(B) >= 1;
        for k = 1:length(B)
        boundary = B{k};
        plot(boundary(:,2), boundary(:,1), cellColor(cellType), 'LineWidth', 1)
        hold on
        end
    end
end

% Labeling the cell numbers based on the order they were originally
% selected
for cellType = 1:3;
    if size(handles.centroids{cellType}{movieNum},1) >= 1;
        for i = 1:size(handles.centroids{cellType}{movieNum},1);            
            text(round(handles.centroids{cellType}{movieNum}(i,1)),round(handles.centroids{cellType}{movieNum}(i,2)), num2str(i), 'FontSize', 10, 'Color', [1, 1, 1]);
            hold on
        end
    end
end

% --- Executes during object creation, after setting all properties.
function slider2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to slider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
